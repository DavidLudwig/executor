// ### Struct needs manual conversion to GUEST<...>
//   unsigned boldItm4: 1;
typedef struct PACKED {
  unsigned boldItm4: 1;
  unsigned boxDrwn4: 1;
  unsigned sound4: 2;
  unsigned boldItm3: 1;
  unsigned boxDrwn3: 1;
  unsigned sound3: 2;
  unsigned boldItm2: 1;
  unsigned boxDrwn2: 1;
  unsigned sound2: 2;
  unsigned boldItm1: 1;
  unsigned boxDrwn1: 1;
  unsigned sound1: 2;
} StageList;

// ### Struct needs manual conversion to GUEST<...>
//   union
typedef struct PACKED HMMessageRecord
{
  INTEGER hmmHelpType;
  union
  {
    Str255 hmmString;
    INTEGER hmmPict;
    HMStringResType hmmStringRes;
    PACKED_MEMBER(TEHandle, hmmTEHandle);
    PACKED_MEMBER(PicHandle, hmmPictHandle);
    INTEGER hmmTERes;
    INTEGER hmmSTRRes;
  } u;
} HMMessageRecord, *HMMessageRecPtr;

// ### Struct needs manual conversion to GUEST<...>
//   union
typedef struct PACKED LocationNameRec
{
  PPCLocationKind locationKindSelector;
  
  union
    {
      EntityName npbEntity;
      Str32 npbType;
  } u;
} LocationNameRec;

// ### Struct needs manual conversion to GUEST<...>
//   union
typedef struct PACKED PPCPortRec
{
  ScriptCode nameScript;
  Str32 name;
  
  PPCPortKinds portKindsSelector;
  
  union
  {
    Str32 portTypeStr;
    struct PACKED
    {
      OSType creator;
      OSType type;
    } port;
  } u;
} PPCPortRec, *PPCPortPtr;

// ### Struct needs manual conversion to GUEST<...>
// #if 0
typedef struct PACKED ae_header
{
  /* #### always zero (?) */
  uint32 unknown_1;
  
  /* #### contains unknown values */
  uint32 unknown_2;
  
  uint32 param_offset;
  
  uint32 attribute_count;
  uint32 param_count;
  
  /* #### zero pad, use unknown */
  char pad_1[26];
  
  AEEventClass event_class;
  AEEventID event_id;
  
  /* #### takes on various values, no idea */
  uint32 unknown_3;
  
  /* beginning of target inline descriptor; `target->size' determines
     target's actual size */
  inline_desc_t target;
  
#if 0
  /* for show */
  /* #### contains `aevt' tick */
  uint32 unknown_4;
  
  /* contains 0x00010001 */
  uint32 unknown_5;
  
  char attribute_data[...];
  
  /* marker containing tick `;;;;' */
  uint32 unknown_6;
  
  char param_data[...];
#endif
} ae_header_t;

// ### Struct needs manual conversion to GUEST<...>
//   union
typedef struct PACKED FragmentLocator
{
  uint32 where;
  union
  {
    MemFragment inMem;
    DiskFragment onDisk;
    SegmentedFragment inSegs;
  } u;
}
FragmentLocator;

// ### Struct needs manual conversion to GUEST<...>
//   union
typedef struct PACKED comm_toolbox_dispatch_args
{
  int16 selector;
  
  union
  {
    struct PACKED
    {
      int16 n_items;
      PACKED_MEMBER(DialogPtr, dp);
    } shorten_args;
    struct PACKED
    {
      DITLMethod method;
      PACKED_MEMBER(Handle, new_items_h);
      PACKED_MEMBER(DialogPtr, dp);
    } append_args;
    struct PACKED
    {
      PACKED_MEMBER(DialogPtr, dp);
    } count_args;
    struct PACKED
    {
      PACKED_MEMBER(QElemPtr, qp);
    } crm_args;
  } args;
} comm_toolbox_dispatch_args_t;

// ### Struct needs manual conversion to GUEST<...>
//     ULONGINT man_hi:20;
typedef struct PACKED {
    ULONGINT man_lo;
    ULONGINT man_hi:20;
    ULONGINT exp:11;
    ULONGINT sgn:1;
} alpha_x64_t;

// ### Struct needs manual conversion to GUEST<...>
//     union
struct PACKED GuestWrapper
{
    union
    {
        uint16_t align;
        uint8_t data[sizeof(TT)];
    } x;
    
    using WrappedType = TT;
    
    const TT unwrap() const { return *(const TT*)x.data; }
    TT& unwrap() { return *(TT*)x.data; }

    GuestWrapper() = default;
    GuestWrapper(const GuestWrapper<TT>& y) = default;

    GuestWrapper<TT>& operator=(const GuestWrapper<TT>& y) = default;

        // Things that should go away at some point
    GuestWrapper(TT x) { unwrap() = x; }
    GuestWrapper<TT>& operator=(TT y) { this->unwrap() = y; return *this; }
    operator TT() const { return this->unwrap(); }
};

// ### Struct needs manual conversion to GUEST<...>
//   struct PACKED tableentry
typedef struct PACKED
{
  int32 lasttick;
  int16 count;
  struct PACKED tableentry
  {
    int16 top;
    StringPtr name;
    mextp options;
  } entry[1];
} table, *tablePtr, **tableHandle;

// ### Struct needs manual conversion to GUEST<...>
// #if defined (MM_BLOCK_HEADER_SENTINEL)
typedef struct PACKED block_header
{
  /* the bogo new IM books implies (via a picture) that the field
     order is `location, size, flags'; and it says that the 24bit
     header is `location, size'.  but IMII implies that the 24bit
     header order is `size, location'; testing shows this is the
     correct order */
  /* or, as mat would like me to say: `testing shows that good things
     are better than bad things' */
  
#if defined (MM_BLOCK_HEADER_SENTINEL)
  uint8 pre_sentinel[SENTINEL_SIZE];
#endif
  
  /* various flags */
  uint8 flags;
  uint8 master_ptr_flags;
  uint8 reserved;
  uint8 size_correction;
  
  uint32 size;
  
  uint32 location_u; /* sometimes it's a pointer (the zone),
					   sometimes it's an offset */
  
#if defined (MM_RECORD_ALLOCATION_STACK_TRACES)
  int alloc_debug_number;
  void *alloc_pcs[MM_MAX_STACK_TRACE_DEPTH];
#endif
  
#if defined (MM_BLOCK_HEADER_SENTINEL)
  uint8 post_sentinel[SENTINEL_SIZE];
#endif
  
  /* data contained in the block */
  uint32 data[0];
} block_header_t;

// ### Struct needs manual conversion to GUEST<...>
//   void	(*func8)(void)	PACKED;
typedef struct PACKED {
  INTEGER count;

  INTEGER id1;
  INTEGER len1;
  INTEGER prim1;
  INTEGER sec1;
  INTEGER icon1;
  INTEGER proc1;
  INTEGER but1;

  INTEGER id2;
  INTEGER len2;
  Point	point2;
  unsigned char str2[52];

  INTEGER id3;
  INTEGER len3;

  Rect rect3;
  unsigned char icon3[32][4];

  INTEGER id4;
  INTEGER len4;

  Point	point4;
  char	str4[46];

  INTEGER id5;
  INTEGER len5;
  INTEGER num5;
  INTEGER str5;
  Rect	rect5;
  INTEGER proc5;
  INTEGER str5b;
  Rect	rect5b;
  INTEGER	proc5b	PACKED;

  INTEGER id6;
  INTEGER len6;

  char	str6[4];

  INTEGER id7;
  INTEGER len7;
  char	str7[6];

  INTEGER id8;
  INTEGER len8;
  void	(*func8)(void)	PACKED;
} myalerttab_t;

// ### Struct needs manual conversion to GUEST<...>
//   void (*proc)();
struct PACKED pdef {
  INTEGER id;
  INTEGER alen;
  void (*proc)();
  /* NOTE:  THIS IS NOT THE WAY IT WORKS IN THE M*C */
};

// ### Struct needs manual conversion to GUEST<...>
//   struct PACKED but {
struct PACKED bdef {
  INTEGER id;
  INTEGER  alen;
  INTEGER  nbut;
  struct PACKED but {
    INTEGER butstrid;
    Rect butloc;
    INTEGER butprocid;
  } buts[1];
};

// ### Struct needs manual conversion to GUEST<...>
// #if 0
typedef struct PACKED
{
#if 0
  /* true if the save pattern is in _tpat, false if it was placed in
     _tpixpat */
  INTEGER _tinpat;
  Pattern _tpat;
  PACKED_MEMBER(PixPatHandle, _tpixpat);
  Point _tploc;
  Point _tpsize;
  INTEGER _tpmode;
#else
  PenState _tpstate;
#endif
  
  PACKED_MEMBER(GrafPtr, _tport);
  
  INTEGER _tpvis;
  
  INTEGER _tfont;
  INTEGER _tmode;
  INTEGER _tsize;
  Style _tstyle;
  Byte filler;
  PACKED_MEMBER(RgnHandle, _tsaveclip);
  
  /* ### is tesave mac-visible state?  how is color and whatnot really
     stored? */
  int32 fg_color, bk_color;
  /* only filled if `CGrafPort_p ()' */
  RGBColor rgb_fg_color, rgb_bk_color;
} tesave;

// ### Struct needs manual conversion to GUEST<...>
//   union {
typedef struct PACKED {
  /* Sign and exponent. */
  union {
#if !defined (LITTLEENDIAN)
    struct PACKED {           /* Here for added efficiency when BIGENDIAN. */
      unsigned short sgn:1;
      unsigned short exp:15;
    } s;
#endif
    unsigned short sgn_and_exp;
  } se;

  /* Mantissa. */
  union {
    struct PACKED {
      ULONGINT man_hi;
      ULONGINT man_lo;
    } hilo;
    unsigned long long man;
  } man;
} x80_t;

// ### Struct needs manual conversion to GUEST<...>
//   COMMONFSQUEUEDEFS;
typedef struct PACKED
{
  COMMONFSQUEUEDEFS;
  INTEGER ioRefNum;
  INTEGER csCode;
  PACKED_MEMBER(Ptr, csParam);
} VDParamBlock;

