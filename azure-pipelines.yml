trigger:
- master

pool:
  vmImage: 'vs2017-win2016'

steps:
- checkout: self
  submodules: true

# - script: |
#     call "C:\Program Files (x86)\Microsoft Visual Studio\2017\Enterprise\Common7\Tools\vsdevcmd.bat"
#     dir "%temp%"
#     dir "C:\Program Files (x86)\Microsoft Visual Studio\2017\Enterprise\VC\Tools"
#     dir "C:\Program Files (x86)\Microsoft Visual Studio\"
#     dir "C:\Program Files (x86)\Microsoft Visual Studio\Installer"
#   displayName: 'dir for stuff'

# - script: |
#     call "C:\Program Files (x86)\Microsoft Visual Studio\2017\Enterprise\Common7\Tools\vsdevcmd.bat"
#     c:
#     cd
#     cd "C:\Program Files (x86)\Microsoft Visual Studio\"
#     cd
#     dir stdio.h /s
#     dir optional /s
#   displayName: 'dir for c++ headers'

- script: |
    cd
  displayName: 'get cd'

- script: |
    set
  displayName: 'environment'

# - script: |
#     "c:\Program Files (x86)\Microsoft Visual Studio\Installer\vs_installer.exe" ^
#     modify ^
#     --add Microsoft.VisualStudio.Workload.NativeDesktop ^
#     --includeRecommended ^
#     --installPath "C:\Program Files (x86)\Microsoft Visual Studio\2017\Community" ^
#     --passive ^
#     --norestart ^
#     --wait
#   displayName: 'install MSVC'

# - script: |
#     pip install aqtinstall
#     C:
#     cd \
#     python -m aqt 5.11.3 windows desktop win64_msvc2017_64
#   displayName: 'install qt'
# - script: |
#     set
#     dir C:\Qt5.11.3\5.11.3
#     dir "C:/Program Files/Boost/1.69.0"
#     dir "C:/Program Files/Boost/1.69.0/lib"
#     dir "C:/Program Files/Boost/1.69.0/libs"
#     dir "C:/Program Files/Boost/1.69.0/include/boost-1_69"
#   displayName: 'show dirs'

# - script: |
#     choco install llvm ninja winflexbison3 --yes
#     set PATH=C:\Program Files\LLVM\bin;%PATH%
#     clang-cl --version    
#   displayName: 'install llvm, ninja, bison'

- script: |
    choco install llvm --yes
    where clang-cl
    set PATH=C:\Program Files\LLVM\bin;%PATH%
    where clang-cl
    clang-cl --version
  displayName: 'install llvm'

- script: |
    call "C:\Program Files (x86)\Microsoft Visual Studio\2017\Enterprise\Common7\Tools\vsdevcmd.bat"
    where curl
    c:
    cd %temp%
    cd
    curl -o llvm.vsix https://llvmextensions.gallerycdn.vsassets.io/extensions/llvmextensions/llvm-toolchain/1.0.340780/1535663999089/llvm.vsix
    set INSTALL_ME="%temp%\llvm.vsix"
    echo %INSTALL_ME%
    dir %INSTALL_ME%
    where VSIXInstaller
    start /wait VSIXInstaller /quiet /admin %INSTALL_ME%
    echo Done with VSIXInstaller
    dir %temp%
  displayName: 'install llvm.vsix'

# - script: |
#     vcpkg install sdl2
#   displayName: 'vcpkg install'
# - script: |
#     call "C:\Program Files (x86)\Microsoft Visual Studio\2017\Enterprise\Common7\Tools\vsdevcmd.bat"
#     dir C:\Program Files (x86)\Microsoft Visual Studio\2017\Enterprise\MSBuild\15.0\Bin
#     where msbuild
#   displayName: 'find MSBuild'
# - script: |
#     call "C:\Program Files (x86)\Microsoft Visual Studio\2017\Enterprise\Common7\Tools\vsdevcmd.bat"
#     mkdir build
#     cd build
#     cmake ^
#       -DCMAKE_TOOLCHAIN_FILE=C:\vcpkg\scripts\buildsystems\vcpkg.cmake ^
#       -DFRONT_END=qt ^
#       -DQt5Gui_DIR=C:\Qt5.11.3\5.11.3\msvc2017_64\lib\cmake\Qt5Gui ^
#       -Tllvm ^
#       ..
#     cmake --build .
#   displayName: 'configure and build'
#   continueOnError: true

- script: |
    call "C:\Program Files (x86)\Microsoft Visual Studio\2017\Enterprise\Common7\Tools\vsdevcmd.bat"
    where clang-cl
    set PATH=C:\Program Files\LLVM\bin;%PATH%
    where clang-cl
    mkdir build
    cd build
    cmake -Tllvm ..
  displayName: 'cmake test'
  continueOnError: true

#   displayName: 'cmake'
# # - script: |
# #     set PATH=C:\Program Files\LLVM\bin;%PATH%
# #     call "C:\Program Files (x86)\Microsoft Visual Studio 14.0\VC\vcvarsall.bat" x64
# #     mkdir build
# #     cd build
# #     cmake -G Ninja ^
# #       -DCMAKE_BUILD_TYPE=Release ^
# #       -DCMAKE_C_COMPILER=clang-cl ^
# #       -DCMAKE_CXX_COMPILER=clang-cl ^
# #       -DFRONT_END=qt ^
# #       -DBISON_COMMAND=win_bison ^
# #       -DCMAKE_PREFIX_PATH=C:\Qt5.11.3\5.11.3\msvc2017_64\lib\cmake ^
# #       -DBoost_COMPILER=-vc141 ^
# #       ..
# #     cmake --build .

# #       -DCMAKE_TOOLCHAIN_FILE=C:\vcpkg\scripts\buildsystems\vcpkg.cmake 

# - script: |
#     c:
#     cd %temp%
#     curl https://download.microsoft.com/download/8/3/4/834E83F6-C377-4DCE-A757-69A418B6C6DF/Collect.exe -o Collect.exe
#     Collect.exe
#   displayName: 'vslogs collect'

# - task: PublishPipelineArtifact@0
#   inputs:
#     artifactName: 'vslogs'
#     targetPath: 'C:/Users/VssAdministrator/AppData/Local/Temp/vslogs.zip'

- task: PublishPipelineArtifact@0
  inputs:
    artifactName: 'buildfiles'
    targetPath: 'D:/a/1/s'

- task: PublishPipelineArtifact@0
  inputs:
    artifactName: 'VCTargets'
    targetPath: 'C:/Program Files (x86)/Microsoft Visual Studio/2017/Enterprise/Common7/IDE/VC/VCTargets/'
