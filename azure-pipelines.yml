trigger:
- master

pool:
  vmImage: 'vs2017-win2016'

steps:
# - checkout: self
#   submodules: true

# # - script: |
# #     call "C:\Program Files (x86)\Microsoft Visual Studio\2017\Enterprise\VC\Auxiliary\Build\vcvars32.bat" x86
# #     set
# #   displayName: install 
# # - script: |
# #     set
# #   displayName: two
# # - script: |
# #     dir "C:\Program Files (x86)\Microsoft Visual Studio\2017\Enterprise\VC\Auxiliary\Build"
# #   displayName: 'check for vcvars*.bat'

# - script: |
#     fsutil dirty query %SYSTEMDRIVE% >nul
#     If %errorLevel% NEQ 0 (
#       Echo Failure, please rerun this script from an elevated command prompt. Exiting...
#       Exit /B 1
#     ) 
#     Echo Success: this script is running elevated.
#   displayName: 'privilege check'

# - script: |
#     call "C:\Program Files (x86)\Microsoft Visual Studio\2017\Enterprise\Common7\Tools\vsdevcmd.bat"
#     where curl
#     cd %temp%
#     cd
#     curl https://marketplace.visualstudio.com/_apis/public/gallery/publishers/LLVMExtensions/vsextensions/llvm-toolchain/latest/vspackage -o llvm.vsix
#     set INSTALL_ME="%temp%\llvm.vsix"
#     echo %INSTALL_ME%
#     dir %INSTALL_ME%
#     where VSIXInstaller
#     VSIXInstaller /quiet /admin %INSTALL_ME%
#     echo Done with VSIXInstaller
#     dir %temp%
#   displayName: 'install llvm.vsix'

# - script: |
#     call "C:\Program Files (x86)\Microsoft Visual Studio\2017\Enterprise\Common7\Tools\vsdevcmd.bat"
#     where cl
#     cl -?
#   displayName: 'check for cl.exe'

- script: |
    "c:\Program Files (x86)\Microsoft Visual Studio\Installer\vs_installer.exe" ^
    --installPath C:\minVS ^
    --add Microsoft.VisualStudio.Workload.CoreEditor ^
    --passive --norestart --wait
    echo Hello
    

- script: |
    call "C:\Program Files (x86)\Microsoft Visual Studio\2017\Enterprise\Common7\Tools\vsdevcmd.bat"
    dir "C:\Program Files (x86)\Microsoft Visual Studio\2017\Enterprise\Common7\Tools"
    dir "C:\Program Files (x86)\Microsoft Visual Studio\"
    dir "C:\Program Files (x86)\Microsoft Visual Studio\Installer"
    dir "C:\minVS"
  displayName: 'dir for stuff'

# - script: |
#     "c:\Program Files (x86)\Microsoft Visual Studio\Installer\vs_installer.exe" ^
#     modify ^
#     --add Microsoft.VisualStudio.Workload.NativeDesktop ^
#     --includeRecommended ^
#     --installPath "C:\Program Files (x86)\Microsoft Visual Studio\2017\Community" ^
#     --passive ^
#     --norestart ^
#     --wait
#   displayName: 'install MSVC'

# - script: |
#     call "C:\Program Files (x86)\Microsoft Visual Studio\2017\Enterprise\Common7\Tools\vsdevcmd.bat"
#     where VSIXInstaller.exe
#     where curl
#     cd %temp%
#     curl https://llvmextensions.gallerycdn.vsassets.io/extensions/llvmextensions/llvm-toolchain/1.0.340780/1535663999089/llvm.vsix -o llvm.vsix
#     VSIXInstaller /quiet /skuName:Enterprise /skuVersion:15 %temp%/llvm.vsix
#   displayName: 'install llvm.vsix'

# # - script: |
# #     set
# #     call "C:\Program Files (x86)\Microsoft Visual Studio\2017\Enterprise\VC\Auxiliary\Build\vcvars32.bat" x86
# #     set
# #     where VSIXInstaller.exe
# #     where wget
# #     where curl
# #     cd
# #     dir
# #   displayName: 'find misc stuff'
# - script: |
#     pip install aqtinstall
#     C:
#     cd \
#     python -m aqt 5.11.3 windows desktop win64_msvc2017_64
#   displayName: 'install qt'
# - script: |
#     set
#     dir C:\Qt5.11.3\5.11.3
#     dir "C:/Program Files/Boost/1.69.0"
#     dir "C:/Program Files/Boost/1.69.0/lib"
#     dir "C:/Program Files/Boost/1.69.0/libs"
#     dir "C:/Program Files/Boost/1.69.0/include/boost-1_69"
#   displayName: 'show dirs'
# - script: |
#     choco install llvm ninja winflexbison3 --yes
#     set PATH=C:\Program Files\LLVM\bin;%PATH%
#     clang-cl --version    
#   displayName: 'install llvm, ninja, bison'
# - script: |
#     vcpkg install sdl2
#   displayName: 'vcpkg install'
# - script: |
#     call "C:\Program Files (x86)\Microsoft Visual Studio\2017\Enterprise\Common7\Tools\vsdevcmd.bat"
#     dir C:\Program Files (x86)\Microsoft Visual Studio\2017\Enterprise\MSBuild\15.0\Bin
#     where msbuild
#   displayName: 'find MSBuild'
# - script: |
#     call "C:\Program Files (x86)\Microsoft Visual Studio\2017\Enterprise\Common7\Tools\vsdevcmd.bat"
#     mkdir build
#     cd build
#     cmake ^
#       -DCMAKE_TOOLCHAIN_FILE=C:\vcpkg\scripts\buildsystems\vcpkg.cmake ^
#       -DFRONT_END=qt ^
#       -DQt5Gui_DIR=C:\Qt5.11.3\5.11.3\msvc2017_64\lib\cmake\Qt5Gui ^
#       -Tllvm ^
#       ..
#     cmake --build .
#   displayName: 'cmake'
# # - script: |
# #     set PATH=C:\Program Files\LLVM\bin;%PATH%
# #     call "C:\Program Files (x86)\Microsoft Visual Studio 14.0\VC\vcvarsall.bat" x64
# #     mkdir build
# #     cd build
# #     cmake -G Ninja ^
# #       -DCMAKE_BUILD_TYPE=Release ^
# #       -DCMAKE_C_COMPILER=clang-cl ^
# #       -DCMAKE_CXX_COMPILER=clang-cl ^
# #       -DFRONT_END=qt ^
# #       -DBISON_COMMAND=win_bison ^
# #       -DCMAKE_PREFIX_PATH=C:\Qt5.11.3\5.11.3\msvc2017_64\lib\cmake ^
# #       -DBoost_COMPILER=-vc141 ^
# #       ..
# #     cmake --build .

# #       -DCMAKE_TOOLCHAIN_FILE=C:\vcpkg\scripts\buildsystems\vcpkg.cmake 